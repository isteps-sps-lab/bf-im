{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"Intervention Manager (IM) The IM component allows users to easily define intervention rules to orchestrate a production system. The component monitors the status of the worker-factory ecosystem in real-time, by elaborating data from sensors, machines, workers monitoring systems, ERP, and more. The set of intervention rules are known to the IM, which decides which is the best one to trigger. Contents Home Getting Started User & Programmers Manual Architecture User Manual Installation & Administration Manual Installation Guide Authors Vincenzo Cutrona - vincenzo.cutrona@supsi.ch Acknowledgement H2020 Innovation Action -- This project has received funding from the European Union's Horizon 2020 research and innovation programme under grant agreement No 951813.","title":"Home"},{"location":"index.html#intervention-manager-im","text":"The IM component allows users to easily define intervention rules to orchestrate a production system. The component monitors the status of the worker-factory ecosystem in real-time, by elaborating data from sensors, machines, workers monitoring systems, ERP, and more. The set of intervention rules are known to the IM, which decides which is the best one to trigger.","title":"Intervention Manager (IM)"},{"location":"index.html#contents","text":"Home Getting Started User & Programmers Manual Architecture User Manual Installation & Administration Manual Installation Guide","title":"Contents"},{"location":"index.html#authors","text":"Vincenzo Cutrona - vincenzo.cutrona@supsi.ch","title":"Authors"},{"location":"index.html#acknowledgement","text":"H2020 Innovation Action -- This project has received funding from the European Union's Horizon 2020 research and innovation programme under grant agreement No 951813.","title":"Acknowledgement"},{"location":"api.html","text":"Warning Section under construction api.md","title":"Api"},{"location":"architecture.html","text":"Architecture Within the Better Factory project, the IM is deployed as part of the Cognitive Human Robot Interaction (C-HRI) scenario. The deployment is based on Docker Compose, and the set of initialized components is depicted in the picture here below: flowchart LR classDef supsi fill:#B4C7DC,color:#000; classDef pvt fill:#B2B2B2,color:#000; classDef pub fill:#E8F2A1,color:#000; subgraph SUPSI direction TB im:::supsi <--> middleware:::supsi kafka-message-model:::supsi --> middleware:::supsi end subgraph Private Deps models:::pvt <--> im:::supsi end subgraph Public Deps models:::pvt <--> models-db:::pub end The blue-colored components represent the core components for which SUPSI provides and maintains a Docker image; the other components represent Docker images that are either publicly available (green-colored) or maintened by other Better Factory partners (grey-colored). Info In this deployment version, all the Docker images but the public ones can be downloaded from the RAMP Docker Registry . Dependencies middleware The image is based on the fast-data-dev (v2.6.2) project by Lenses.io and runs a full fledged Kafka installation (including extra services, e.g., UIs). In addition, the Schema Registry is automatically populated with schemas available under the /schemas directory. In our deployment, the /schemas directory is read from the kafka-message-model component. The middleware is run in secure mode and can be accessed at localhost:3040 (credentials are stored in the docker-compose file). kafka-message-model This component embeds the data model shared within the Better Factory project. The data model is automatically uploaded to the Schema Registry available within the middleware . models The models component exposes a REST API to access the data model shared among all the components involved in the C-HRI scenario. The API is accessed by the IM to fetch information about workers and other factory elements. models-db The models-db component runs an official MySql docker image (v5.7).","title":"Architecture"},{"location":"architecture.html#architecture","text":"Within the Better Factory project, the IM is deployed as part of the Cognitive Human Robot Interaction (C-HRI) scenario. The deployment is based on Docker Compose, and the set of initialized components is depicted in the picture here below: flowchart LR classDef supsi fill:#B4C7DC,color:#000; classDef pvt fill:#B2B2B2,color:#000; classDef pub fill:#E8F2A1,color:#000; subgraph SUPSI direction TB im:::supsi <--> middleware:::supsi kafka-message-model:::supsi --> middleware:::supsi end subgraph Private Deps models:::pvt <--> im:::supsi end subgraph Public Deps models:::pvt <--> models-db:::pub end The blue-colored components represent the core components for which SUPSI provides and maintains a Docker image; the other components represent Docker images that are either publicly available (green-colored) or maintened by other Better Factory partners (grey-colored). Info In this deployment version, all the Docker images but the public ones can be downloaded from the RAMP Docker Registry .","title":"Architecture"},{"location":"architecture.html#dependencies","text":"","title":"Dependencies"},{"location":"architecture.html#middleware","text":"The image is based on the fast-data-dev (v2.6.2) project by Lenses.io and runs a full fledged Kafka installation (including extra services, e.g., UIs). In addition, the Schema Registry is automatically populated with schemas available under the /schemas directory. In our deployment, the /schemas directory is read from the kafka-message-model component. The middleware is run in secure mode and can be accessed at localhost:3040 (credentials are stored in the docker-compose file).","title":"middleware"},{"location":"architecture.html#kafka-message-model","text":"This component embeds the data model shared within the Better Factory project. The data model is automatically uploaded to the Schema Registry available within the middleware .","title":"kafka-message-model"},{"location":"architecture.html#models","text":"The models component exposes a REST API to access the data model shared among all the components involved in the C-HRI scenario. The API is accessed by the IM to fetch information about workers and other factory elements.","title":"models"},{"location":"architecture.html#models-db","text":"The models-db component runs an official MySql docker image (v5.7).","title":"models-db"},{"location":"getting-started.html","text":"Getting Started The IM and its dependencies are provided as Dockerized applications. To start the IM and its dependencies, issue the up command: docker-compose up -d The IM is now available at localhost:8666 . You can use the IM UI to edit the possible interventions available for the factory (find out out to use the UI in the User Manual ). The intervention will be triggered by the IM and written to the middleware component. Also, Kafka is accessible from the Kafka Development Environment, which is available at localhost:3040 . Here you can check schemas uploaded to the Schema Registry, as well as existing Kafka topics and their content.","title":"Getting Started"},{"location":"getting-started.html#getting-started","text":"The IM and its dependencies are provided as Dockerized applications. To start the IM and its dependencies, issue the up command: docker-compose up -d The IM is now available at localhost:8666 . You can use the IM UI to edit the possible interventions available for the factory (find out out to use the UI in the User Manual ). The intervention will be triggered by the IM and written to the middleware component. Also, Kafka is accessible from the Kafka Development Environment, which is available at localhost:3040 . Here you can check schemas uploaded to the Schema Registry, as well as existing Kafka topics and their content.","title":"Getting Started"},{"location":"installationguide.html","text":"Installation Guide Requirements All the components are provided as Dockerized applications, thus the following software is required: Docker Docker Compose Info We tested our deployment on machines running different configurations: Ubuntu 21, Docker 20.10.8, Docker Compose 1.29.2 Ubuntu 22, Docker 24.0.5, Docker Compose 2.20.2 Install Before running the containers, it is required to download the Docker images from their respective registries. While some images are publicly available, some other require credentials to be downloaded from private registries. Faq Images can be download from the RAMP Docker registry, which supports the token-based authentication. Please send your request for a new token to the RAMP Docker registry maintainers. Once you are provided with a username and a token, you can issue the following command to login to the RAMP Docker registry and download the images: docker login docker.ramp.eu -u <username> -p <token> docker-compose pull <image>:<tag> Usage The docker-compose file automatically runs all the components as Docker containers. Each container can be customized by editing its environment parameters. The current deployment already set the right values for all the parameters. We suggest the user to only modify variables listed in the .env file, if needed. Parameter name Parameter value Default BF_USER A username shared by all the components bfuser BF_PASSWORD A password shared by all the components bfpwd123 MODELS_MYSQL_DATABASE Name of the database to store the shared model models MODELS_MYSQL_ROOT_PASSWORD Password for the root user in MySQL root Run the up command to start all the containers: docker-compose up -d You can now access different components: The IM is available at localhost:8666 ; you can use the IM UI to edit the possible interventions available for the factory. The intervention will be triggered by the IM and written to the middleware component. Kafka is accessible from the Kafka Development Environment, which is available at localhost:3040 . Here you can check schemas uploaded to the Schema Registry, as well as existing Kafka topics and their content. Software Maintainers Vincenzo Cutrona - vincenzo.cutrona@supsi.ch Giuseppe Landolfi - giuseppe.landolfi@supsi.ch","title":"Installation Guide"},{"location":"installationguide.html#installation-guide","text":"","title":"Installation Guide"},{"location":"installationguide.html#requirements","text":"All the components are provided as Dockerized applications, thus the following software is required: Docker Docker Compose Info We tested our deployment on machines running different configurations: Ubuntu 21, Docker 20.10.8, Docker Compose 1.29.2 Ubuntu 22, Docker 24.0.5, Docker Compose 2.20.2","title":"Requirements"},{"location":"installationguide.html#install","text":"Before running the containers, it is required to download the Docker images from their respective registries. While some images are publicly available, some other require credentials to be downloaded from private registries. Faq Images can be download from the RAMP Docker registry, which supports the token-based authentication. Please send your request for a new token to the RAMP Docker registry maintainers. Once you are provided with a username and a token, you can issue the following command to login to the RAMP Docker registry and download the images: docker login docker.ramp.eu -u <username> -p <token> docker-compose pull <image>:<tag>","title":"Install"},{"location":"installationguide.html#usage","text":"The docker-compose file automatically runs all the components as Docker containers. Each container can be customized by editing its environment parameters. The current deployment already set the right values for all the parameters. We suggest the user to only modify variables listed in the .env file, if needed. Parameter name Parameter value Default BF_USER A username shared by all the components bfuser BF_PASSWORD A password shared by all the components bfpwd123 MODELS_MYSQL_DATABASE Name of the database to store the shared model models MODELS_MYSQL_ROOT_PASSWORD Password for the root user in MySQL root Run the up command to start all the containers: docker-compose up -d You can now access different components: The IM is available at localhost:8666 ; you can use the IM UI to edit the possible interventions available for the factory. The intervention will be triggered by the IM and written to the middleware component. Kafka is accessible from the Kafka Development Environment, which is available at localhost:3040 . Here you can check schemas uploaded to the Schema Registry, as well as existing Kafka topics and their content.","title":"Usage"},{"location":"installationguide.html#software-maintainers","text":"Vincenzo Cutrona - vincenzo.cutrona@supsi.ch Giuseppe Landolfi - giuseppe.landolfi@supsi.ch","title":"Software Maintainers"},{"location":"usermanual.html","text":"User Manual Info We assume the IM having its default configuration, thus being available on port 8666 of the hosting machine. Management of the Interventions This section introduces the reader to the GUI of the IM, with a focus on the management of the intervention rules. The management activity covers the following actions: VIEW : List existing interventions, with their details CREATE : Add new interventions to the IM DELETE : Remove existing interventions from the IM EDIT : Modify existing interventions. Specifically, an intervention can be modified by: C-ADD : Adding new conditions C-REMOVE : Removing some conditions In the following, some How-to s are provided to help the reader in dealing with the basic management of interventions through the IM GUI. How-to: VIEW Head to localhost:8666 from your Web browser. The browser will display the IM main page, as follows: The main page lists all the available interventions. Important Interventions listed on the main page are all active. How-to: CREATE From the main, click the Add new Intervention at the bottom of the intervention list. A new default intervention named NEW INTERVENTION is added to the list. See the How-to: EDIT section to know how to customize the generated intervention. How-to: EDIT To edit an intervention, click on its description from the list of interventions in the main page. A new page appears, showing the details of the selected intervention. Click on the Edit button to enter the edit mode and make the fields editable. How-to: C-ADD To add a condition, start by selecting the type of condition. The available types of condition are as follows: LOW_REQUIREMENT Condition to check if the minimum requirements are met. Returns true when the job has higher requirements than the workers has traits. DYNAMIC_PARAMETER_IN_RANGE Condition to check if a Dynamic Parameter is inside the specified range. Returns true when value is in the range. IS_INTERVENTION_ACTIVE Condition to check if the specified intervention is active for the inspected worker. Returns true when the intervention is active. IS_INTERVENTION_INACTIVE Condition to check if the specified intervention is not active for the inspected worker. Returns true when the intervention is not active. IS_ON_WORKSTATION Condition to check if a worker is assigned to a workstation. Returns true when the worker is assigned to the specified workstation. LOW_EXPERIENCE Condition to check if the worker has enough experience to carry out this work. Parameter is the minimum number of times the job has been executed. IS_WORKER Condition to check if a worker is a specific person Returns true when the worker si the specified person (based on the id). DYNAMIC_PARAMETER_IN_RANGE_WINDOW Condition to check if a Dynamic Parameter is inside the specified range for the given window and with the specified aggregation function. Returns true when value is in the range. Depending on the chosen condition, a new window may pop-up, asking for specific information. The following figure depicts the condition parameters needed for the DYNAMIC_PARAMETER_IN_RANGE type. Click the Add button to update the intervention with the new condition. Warning Adding a new condition will trigger a compatibility check. You may be alerted that \" The selected condition is incompatible with the other declared for the current intervention \". The updated status of the intervention is then available to the user. When satisfied with the set conditions, click the Save button to persist the modified intervention. The updated details will be shown to the user. To know how to delete an existing condition, see the How-to: C-REMOVE section. How-to: C-REMOVE When you are in edit mode (checkout section How-to: EDIT to know how to enter this mode), click the \"Trash Bin\" icon next the condition to remove. How-to: DELETE To delete an intervention, click the \"Trash Bin\" icon next the intervention to remove from the list of interventions on the main page.","title":"User Manual"},{"location":"usermanual.html#user-manual","text":"Info We assume the IM having its default configuration, thus being available on port 8666 of the hosting machine.","title":"User Manual"},{"location":"usermanual.html#management-of-the-interventions","text":"This section introduces the reader to the GUI of the IM, with a focus on the management of the intervention rules. The management activity covers the following actions: VIEW : List existing interventions, with their details CREATE : Add new interventions to the IM DELETE : Remove existing interventions from the IM EDIT : Modify existing interventions. Specifically, an intervention can be modified by: C-ADD : Adding new conditions C-REMOVE : Removing some conditions In the following, some How-to s are provided to help the reader in dealing with the basic management of interventions through the IM GUI.","title":"Management of the Interventions"},{"location":"usermanual.html#how-to-view","text":"Head to localhost:8666 from your Web browser. The browser will display the IM main page, as follows: The main page lists all the available interventions. Important Interventions listed on the main page are all active.","title":"How-to: VIEW"},{"location":"usermanual.html#how-to-create","text":"From the main, click the Add new Intervention at the bottom of the intervention list. A new default intervention named NEW INTERVENTION is added to the list. See the How-to: EDIT section to know how to customize the generated intervention.","title":"How-to: CREATE"},{"location":"usermanual.html#how-to-edit","text":"To edit an intervention, click on its description from the list of interventions in the main page. A new page appears, showing the details of the selected intervention. Click on the Edit button to enter the edit mode and make the fields editable.","title":"How-to: EDIT"},{"location":"usermanual.html#how-to-c-add","text":"To add a condition, start by selecting the type of condition. The available types of condition are as follows: LOW_REQUIREMENT Condition to check if the minimum requirements are met. Returns true when the job has higher requirements than the workers has traits. DYNAMIC_PARAMETER_IN_RANGE Condition to check if a Dynamic Parameter is inside the specified range. Returns true when value is in the range. IS_INTERVENTION_ACTIVE Condition to check if the specified intervention is active for the inspected worker. Returns true when the intervention is active. IS_INTERVENTION_INACTIVE Condition to check if the specified intervention is not active for the inspected worker. Returns true when the intervention is not active. IS_ON_WORKSTATION Condition to check if a worker is assigned to a workstation. Returns true when the worker is assigned to the specified workstation. LOW_EXPERIENCE Condition to check if the worker has enough experience to carry out this work. Parameter is the minimum number of times the job has been executed. IS_WORKER Condition to check if a worker is a specific person Returns true when the worker si the specified person (based on the id). DYNAMIC_PARAMETER_IN_RANGE_WINDOW Condition to check if a Dynamic Parameter is inside the specified range for the given window and with the specified aggregation function. Returns true when value is in the range. Depending on the chosen condition, a new window may pop-up, asking for specific information. The following figure depicts the condition parameters needed for the DYNAMIC_PARAMETER_IN_RANGE type. Click the Add button to update the intervention with the new condition. Warning Adding a new condition will trigger a compatibility check. You may be alerted that \" The selected condition is incompatible with the other declared for the current intervention \". The updated status of the intervention is then available to the user. When satisfied with the set conditions, click the Save button to persist the modified intervention. The updated details will be shown to the user. To know how to delete an existing condition, see the How-to: C-REMOVE section.","title":"How-to: C-ADD"},{"location":"usermanual.html#how-to-c-remove","text":"When you are in edit mode (checkout section How-to: EDIT to know how to enter this mode), click the \"Trash Bin\" icon next the condition to remove.","title":"How-to: C-REMOVE"},{"location":"usermanual.html#how-to-delete","text":"To delete an intervention, click the \"Trash Bin\" icon next the intervention to remove from the list of interventions on the main page.","title":"How-to: DELETE"}]}